////////////////////////////////////////////////////////////////////////////////
// TunnelX -- Cave Drawing Program  
// Copyright (C) 2002  Julian Todd.  
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  
////////////////////////////////////////////////////////////////////////////////
package Tunnel;

import java.io.IOException;  

//
//
// TunnelSaver
//
//



/////////////////////////////////////////////
/////////////////////////////////////////////
class TunnelSaver
{
	/////////////////////////////////////////////
	static void emitError(String mess, IOException e) throws IOException
	{
		TN.emitError(mess); 
		throw e; 
	}

	/////////////////////////////////////////////
	/////////////////////////////////////////////
	static void Savesvxfile(OneTunnel tunnel) throws IOException
	{
		LineOutputStream los = new LineOutputStream(tunnel.svxfile);  
		LineInputStream lis = new LineInputStream(tunnel.getTextData(), null); 

		// bracket with *begin and end
		los.WriteLine("; Warning: SVX file generated by Tunnel.  Do not edit.  To change, edit your original files and save on top."); 
		los.WriteLine(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"); 
		los.WriteLine("*begin " + tunnel.name); 

		while (lis.FetchNextLine())
			los.WriteLine(lis.GetLine()); 

		// put out the *includes 
		for (OneTunnel downtunnel : tunnel.vdowntunnels)
			los.WriteLine("*include " + downtunnel.name + "/" + downtunnel.name + ".svx"); 
		los.WriteLine(""); 

		los.WriteLine("*end " + tunnel.name); 

		lis.close(); 
		los.close(); 
	}


	/////////////////////////////////////////////
	static void SaveSketch(OneTunnel tunnel, OneSketch lsketch) throws IOException
	{
		assert tunnel.tsketches.contains(lsketch); 
		if (!lsketch.bsketchfileloaded)
			return;
		if (lsketch.bsketchfilechanged)
		{
			LineOutputStream los = new LineOutputStream(lsketch.sketchfile);
			los.WriteLine(TNXML.sHEADER);
			los.WriteLine("");

			los.WriteLine(TNXML.xcomopen(0, TNXML.sTUNNELXML));
			lsketch.WriteXML(los);
			los.WriteLine(TNXML.xcomclose(0, TNXML.sTUNNELXML));

			los.close();

			lsketch.bsketchfilechanged = false;
		}
	}



	/////////////////////////////////////////////
	static void SaveFilesRecurse(OneTunnel tunnel) throws IOException
	{
		TNXML.chconvleng = TNXML.chconv.length; // hack this to make sure the &space; will get in.

		if (tunnel.tundirectory.isFile())
			emitError("directory name is file " + tunnel.tundirectory.toString(), new IOException());
		if (!tunnel.tundirectory.isDirectory())
		{
			if (!tunnel.tundirectory.mkdirs())
				emitError("cannot mkdirs on " + tunnel.tundirectory.toString(), new IOException());
			TN.emitMessage("Creating directory " + tunnel.tundirectory.toString());
		}


		if (tunnel.bsvxfilechanged)
		{
			Savesvxfile(tunnel);
			tunnel.bsvxfilechanged = false;
		}

		for (OneSketch lsketch : tunnel.tsketches)
			SaveSketch(tunnel, lsketch);

		// work with all the downtunnels
		for (OneTunnel downtunnel : tunnel.vdowntunnels)
			SaveFilesRecurse(downtunnel);
	}

	/////////////////////////////////////////////
	static void SaveFilesRoot(OneTunnel tunnel, boolean bSketchesOnly)
	{
		// check that saved directory is good.
		try
		{
			if (bSketchesOnly)
			{
				for (OneSketch lsketch : tunnel.tsketches)
					SaveSketch(tunnel, lsketch);
			}
			else
				SaveFilesRecurse(tunnel);
		}
		catch (IOException ie)
		{
			TN.emitWarning(ie.toString());
		};
	}
};
